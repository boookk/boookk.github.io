<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://boookk.github.io/</id><title>boookk</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2022-05-23T23:04:32+09:00</updated> <author> <name>boookk</name> <uri>https://boookk.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://boookk.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://boookk.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 boookk </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Transaction</title><link href="https://boookk.github.io/posts/Transaction/" rel="alternate" type="text/html" title="Transaction" /><published>2022-04-20T23:00:00+09:00</published> <updated>2022-04-20T23:00:00+09:00</updated> <id>https://boookk.github.io/posts/Transaction/</id> <content src="https://boookk.github.io/posts/Transaction/" /> <author> <name>boookk</name> </author> <category term="MSA" /> <summary> 💨 Monoliths ↔ MSA 전환 Application Logic layer부터 순차적으로 분해 Router 구축 Monoliths가 router를 통해 요청 받게 하기 API로 통신 가능한 작은 규모의 서비스를 분리하여 microservice 1개 구축 구축된 서비스만 proxy 전환 DB 또는 schema 분리 분리된 서비스를 위한 Data Migration 검증 및 확장 🏃 데이터 이관 전략 Downtime 갖고 한 번에 ETL (Extract, Transform, Load) 구DB와 새 DB 둘 다 사용하지만, Monoliths에서는 ReadOnly CDC를 이용하여 변경되는 데이터만 새 DB에 반영 오늘날에는 AWS Sno... </summary> </entry> <entry><title>Netflixed</title><link href="https://boookk.github.io/posts/Netflixed/" rel="alternate" type="text/html" title="Netflixed" /><published>2022-04-20T23:00:00+09:00</published> <updated>2022-04-20T23:00:00+09:00</updated> <id>https://boookk.github.io/posts/Netflixed/</id> <content src="https://boookk.github.io/posts/Netflixed/" /> <author> <name>boookk</name> </author> <category term="MSA" /> <summary> 🧐 Netflixed 미국 실리콘밸리에서 기존 비즈니스 모델이 붕괴되었을 때를 일컫는 말 ✨ Netflix OpenSource Software 기존 Legacy 시스템을 클라우드 환경의 MSA로 전환하기 위해 사용한 기술을 공개한 것 🏃 Netflix는 MSA의 선구자 🧶 Eureka Client와 Application server 사이에서 로드 밸런싱 및 장애 조치를 위해 AWS 클라우드에서 주로 사용되는 RESTful 서비스 클라우드 기반의 MSA 서비스의 IP와 port는 일정하지 않고 지속적으로 변화 Eureka는 클라우드 환경에서 연결 정보 등록 및 해지를 도와주는 역할 Eureka Server와 Eureka Client로 구성 🧐 Eur... </summary> </entry> <entry><title>Micro Service Architecture</title><link href="https://boookk.github.io/posts/Micro-Service-Architecture/" rel="alternate" type="text/html" title="Micro Service Architecture" /><published>2022-04-19T23:00:00+09:00</published> <updated>2022-04-19T23:00:00+09:00</updated> <id>https://boookk.github.io/posts/Micro-Service-Architecture/</id> <content src="https://boookk.github.io/posts/Micro-Service-Architecture/" /> <author> <name>boookk</name> </author> <category term="MSA" /> <summary> ❓ Monoliths 전통적인 시스템 구조로 하나의 단위로 개발하는 단일 서비스 개발 방식 📍 Monolith 단점 긴 빌드 시간 및 테스트 시간 특정 개발 언어, DB에 종속 선택적으로 확장 불가능 서비스 간 높은 의존성 ❓ Software 모듈화 큰 문제를 해결하기 위해 작은 단위로 나누어 개발하는 방법 마이크로 서비스를 만들기 위한 첫 과정 서비스 기능의 확장, 수정, 테스트, 재사용 편리 💡 모듈 설계 조건 모듈마다 다른 모듈과 구분되는 독립적인 기능 수행 독립적인 컴파일 가능 한 모듈에서 다른 모듈 호출 가능 🔎 모듈화의 특징 캡슐화 모듈 내 동작 방식, 데이터 구조를 다른 모듈에게 은폐 추상화 ... </summary> </entry> <entry><title>Domain Driven</title><link href="https://boookk.github.io/posts/Domain-Driven-Development/" rel="alternate" type="text/html" title="Domain Driven" /><published>2022-04-18T23:00:00+09:00</published> <updated>2022-04-18T23:00:00+09:00</updated> <id>https://boookk.github.io/posts/Domain-Driven-Development/</id> <content src="https://boookk.github.io/posts/Domain-Driven-Development/" /> <author> <name>boookk</name> </author> <category term="MSA" /> <summary> 🍃 기존의 개발 관계형 데이터 모델에 종속 최초 설계 데이터의 모델링의 변경과 확장하기 어려움 모델링과 실제 개발의 불일치 누적 🎨 Domain Driven Design 데이터를 기능과 분리해서 식별하지 않고, 별도의 도메인 모델로 정의 용어 사전을 기반으로 도메인 설계 도메인 별로 설계와 구현 가능 🧐 용어 사전 (Ubiquitous Language) 사용자와 설계자, 구현자가 모두 의미에 동의할 수 있는 용어의 모음 ✨ Domain 소프트웨어로 해결하고자 하는 문제 영역 개발하려는 서비스의 비즈니스 로직과 연관 ❓ Domain model 요구사항으로부터 Domain과 이하 entity를 정의하고 그 관계를 경계와 함께 추상... </summary> </entry> <entry><title>WebFlux</title><link href="https://boookk.github.io/posts/WebFlux/" rel="alternate" type="text/html" title="WebFlux" /><published>2022-04-15T23:00:00+09:00</published> <updated>2022-04-23T15:39:01+09:00</updated> <id>https://boookk.github.io/posts/WebFlux/</id> <content src="https://boookk.github.io/posts/WebFlux/" /> <author> <name>boookk</name> </author> <category term="MSA" /> <summary> ❓ WebFlux Client와 Server에서 reactive 스타일의 어플리케이션 개발을 도와주는 모듈 Spring5에서 reactive stack을 지원하는 web container framework 🔎 WebFlux 특징 Non-Blocking IO 최소한의 리소스로 효율적인 운영 Singler worker thread가 event loop 처리 Event loop는 코어 개수만큼 존재 Functional Endpoints Lambda 기반 functional programming model Request router가 handler로 request routing Handler method에 @RequestMapping 선언부 없이... </summary> </entry> </feed>
